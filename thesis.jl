using Distributions
using ForwardDiff
using JuMP
using NLopt
using Plots
#using StatPlots
using GR
using DataFrames
using MultivariateStats
using GLMNet
using Flux:batch

gr() #Use GR backend for Plots

Œ∏ = 0.05 #speed of reversion to mean in OU process
œÇ = 0.02 #ETF vol
Œ∫ = 0.00008 #Premium vol
Œª·µÉ = 500
Œª·µá = 500
Œª·µñ = 500
Œõ = 5000
Œõ·µñ = 10000
œ± = 0.5 #correlation between ETF and Premium
s‚ÇÄ = 100.0 #intiial price
p‚ÇÄ = 0.0 #initial premium
ùî≠ = 0.0 #fair premium
x‚ÇÄ = [0.0, s‚ÇÄ, p‚ÇÄ, 0.0, 0.0] #initial state
œÅ = 0.2 #reward discounting rate
œá = 0.0001 #transaction cost
hedge_limit = 1 #do not hedge if net position is less than 1
funding_limit = -100 #cash limit we can borrow with ease
# State utils
y(x) = x[1]
s(x) = x[2]
p(x) = x[3]
q(x) = x[4]
h(x) = x[5]
cheap(p,s) = p <= -0.005*s
rich(p,s) = p >= 0.005*s
cheap(x) = cheap(p(x),s(x))
rich(x) = rich(p(x),s(x))

#Wealth function
function v(x)
    y(x) + q(x)*s(x) + h(x)*(s(x)-p(x))
end

#Utility function
# function R(x)
#     v(x) - s(x)^2 * œÇ^2 * (q(x)+h(x))^2
# end

function R(x)
    y(x) + (q(x)*s(x) + h(x)*(s(x)-p(x)))*exp(-(q(x)*s(x) + h(x)*(s(x)-p(x)))*10^-6)
end

#Jump amplitude distributions
dist1 = Exponential(1/Œõ)
dist2 = Exponential(1/Œõ·µñ)

quantiles1 = [quantile(dist1,i) for i in 0.0:0.02:0.99]
quantiles2 = [quantile(dist2,i) for i in 0.0:0.02:0.99]

r·µÉ(x) = rich(x) ? quantiles2 : quantiles1
r·µá(x) = cheap(x) ? quantiles2 : quantiles1

#basis functions
œï(x) = [v(x), y(x), s(x), p(x), q(x), h(x), s(x)^2, p(x)^2, q(x)^2, h(x)^2, log(s(x)),
        s(x)*q(x), h(x)*s(x), h(x)*p(x), tanh(v(x)/1000), tanh((q(x)+h(x))/1000)]

Œ∏·µõ = zeros(length(œï(ones(5))))
Œ∏·µÉ = zeros(length(œï(ones(5))))
Œ∏·µá = zeros(length(œï(ones(5))))
Œ∏ ∑ = zeros(length(œï(ones(5))))

#Function approximations
# V(x) =  sum(Œ∏·µõ .* œï(x))
# Œ¥·µÉ(x) = sum(Œ∏·µÉ .* œï(x))
# Œ¥·µá(x) = sum(Œ∏·µá .* œï(x))
# Œæ(x) =  sum(Œ∏ ∑ .* œï(x))
V(x,Œ∏·µõ=Œ∏·µõ) =  sum(Œ∏·µõ .* œï(x))
Œ¥·µÉ(x,Œ∏·µÉ=Œ∏·µÉ) = sum(Œ∏·µÉ .* œï(x))
Œ¥·µá(x,Œ∏·µá=Œ∏·µá) = sum(Œ∏·µá .* œï(x))
Œæ(x,Œ∏ ∑=Œ∏ ∑) =  sum(Œ∏ ∑ .* œï(x))

#Reward function partial derivatives
‚àáR(x) = ForwardDiff.gradient(R,x)
‚àá¬≤R(x) = ForwardDiff.hessian(R,x)
‚àÇRy(x) = ‚àáR(x)[1]
‚àÇRs(x) = ‚àáR(x)[2]
‚àÇRp(x) = ‚àáR(x)[3]
‚àÇRq(x) = ‚àáR(x)[4]
‚àÇRh(x) = ‚àáR(x)[5]
‚àÇ‚àÇRss(x) = ‚àá¬≤R(x)[2,2]
‚àÇ‚àÇRpp(x) = ‚àá¬≤R(x)[3,3]
‚àÇ‚àÇRsp(x) = ‚àá¬≤R(x)[2,3]

#Value function partial derivatives
‚àáV(x) = ForwardDiff.gradient(V,x)
‚àá¬≤V(x) = ForwardDiff.hessian(V,x)
‚àÇVy(x) = ‚àáV(x)[1]
‚àÇVs(x) = ‚àáV(x)[2]
‚àÇVp(x) = ‚àáV(x)[3]
‚àÇVq(x) = ‚àáV(x)[4]
‚àÇVh(x) = ‚àáV(x)[5]
‚àÇ‚àÇVss(x) = ‚àá¬≤V(x)[2,2]
‚àÇ‚àÇVpp(x) = ‚àá¬≤V(x)[3,3]
‚àÇ‚àÇVsp(x) = ‚àá¬≤V(x)[2,3]

#Value ingredients
Œî·µÉ(x,Œ¥·µÉ,r·µÉ) = [y(x) + (r·µÉ>=Œ¥·µÉ ? s(x)*(1+Œ¥·µÉ) : 0), s(x) + s(x)*r·µÉ, p(x) + s(x)*r·µÉ, q(x) + (r·µÉ>=Œ¥·µÉ ? -1 : 0), h(x)]
Œî·µá(x,Œ¥·µá,r·µá) = [y(x) + (r·µá>=Œ¥·µá ? -s(x)*(1-Œ¥·µá) : 0), s(x) - s(x)*r·µá, p(x) - s(x)*r·µá, q(x) + (r·µá>=Œ¥·µá ?  1 : 0), h(x)]
Œî·µÉV(x,Œ¥·µÉ,r·µÉ) = V(Œî·µÉ(x,Œ¥·µÉ,r·µÉ)) - V(x)
Œî·µáV(x,Œ¥·µá,r·µá) = V(Œî·µá(x,Œ¥·µá,r·µá)) - V(x)
Œî·µÉ·µñV(x,r·µñ) = cheap(x) ? V([y(x),s(x),p(x)+s(x)*r·µñ,q(x),h(x)]) - V(x) : 0
Œî·µá·µñV(x,r·µñ) = rich(x) ? V([y(x),s(x),p(x)-s(x)*r·µñ,q(x),h(x)]) - V(x) : 0
EŒî·µÉV(x,Œ¥·µÉ) = mean([Œî·µÉV(x,Œ¥·µÉ,r) for r in r·µÉ(x)])
EŒî·µáV(x,Œ¥·µá) = mean([Œî·µáV(x,Œ¥·µá,r) for r in r·µá(x)])
EŒî·µÉ·µñV(x) = mean([Œî·µÉ·µñV(x,r) for r in r·µÉ(x)])
EŒî·µá·µñV(x) = mean([Œî·µá·µñV(x,r) for r in r·µá(x)])

#Reward ingredients
Œî·µÉR(x,Œ¥·µÉ,r·µÉ) = R(Œî·µÉ(x,Œ¥·µÉ,r·µÉ)) - R(x)
Œî·µáR(x,Œ¥·µá,r·µá) = R(Œî·µá(x,Œ¥·µá,r·µá)) - R(x)
Œî·µÉ·µñR(x,r·µñ) = cheap(x) ? R([y(x),s(x),p(x)+s(x)*r·µñ,q(x),h(x)]) - R(x) : 0
Œî·µá·µñR(x,r·µñ) = rich(x) ? R([y(x),s(x),p(x)-s(x)*r·µñ,q(x),h(x)]) - R(x) : 0
EŒî·µÉR(x,Œ¥·µÉ) = mean([Œî·µÉR(x,Œ¥·µÉ,r) for r in r·µÉ(x)])
EŒî·µáR(x,Œ¥·µá) = mean([Œî·µáR(x,Œ¥·µá,r) for r in r·µá(x)])
EŒî·µÉ·µñR(x) = mean([Œî·µÉ·µñR(x,r) for r in r·µÉ(x)])
EŒî·µá·µñR(x) = mean([Œî·µá·µñR(x,r) for r in r·µá(x)])


#Infinitesimal operator for V
function AV(x,Œ¥·µÉ,Œ¥·µá)
    Œ∏*(ùî≠*s(x)-p(x))*‚àÇVp(x)
    + 0.5 * s(x)^2 *(œÇ^2 * ‚àÇ‚àÇVss(x) + Œ∫^2 * ‚àÇ‚àÇVpp(x) + 2 * œ± * œÇ * Œ∫ * ‚àÇ‚àÇVsp(x))
    + Œª·µÉ^-1 * EŒî·µÉV(x,Œ¥·µÉ) + Œª·µá^-1 * EŒî·µáV(x,Œ¥·µá) + Œª·µñ^-1 * EŒî·µÉ·µñV(x) + Œª·µñ^-1 * EŒî·µá·µñV(x)
end

#Infinitesimal operator for R
function AR(x,Œ¥·µÉ,Œ¥·µá)
    Œ∏*(ùî≠*s(x)-p(x))*‚àÇRp(x)
    + 0.5 * s(x)^2 *(œÇ^2 * ‚àÇ‚àÇRss(x) + Œ∫^2 * ‚àÇ‚àÇRpp(x) + 2 * œ± * œÇ * Œ∫ * ‚àÇ‚àÇRsp(x))
    + Œª·µÉ^-1 * EŒî·µÉR(x,Œ¥·µÉ) + Œª·µá^-1 * EŒî·µáR(x,Œ¥·µá) + Œª·µñ^-1 * EŒî·µÉ·µñR(x) + Œª·µñ^-1 * EŒî·µá·µñR(x)
end

function LV(x,Œ¥·µÉ,Œ¥·µá)
    AR(x,Œ¥·µÉ,Œ¥·µá) + AV(x,Œ¥·µÉ,Œ¥·µá) - œÅ*V(x)
end

function Œì(x,Œæ)
    x .+ [-(s(x)-p(x))*Œæ - abs(Œæ)*s(x)*œá, 0, 0, 0, Œæ]
end

function MV(x,Œæ)
    V(Œì(x,Œæ))-V(x)
end

#Establishes valid values for Œæ depending on the position
function validŒæ(q,h)
    if q+h> hedge_limit #long
        max(-q-h,-5):0
    elseif q+h < -hedge_limit
        0:min(-q-h,5)
    else
        0:0
    end
end

maxŒ¥·µÉ(x) = 0.0001*argmax([EŒî·µÉV(x,Œ¥)+EŒî·µÉR(x,Œ¥) for Œ¥ in 0.0001:0.0001:0.0020])
maxŒ¥·µá(x) = 0.0001*argmax([EŒî·µáV(x,Œ¥)+EŒî·µáR(x,Œ¥) for Œ¥ in 0.0001:0.0001:0.0020])
maxŒæ(x)  = validŒæ(q(x),h(x))[argmax([V(Œì(x,Œæ)) for Œæ in validŒæ(q(x),h(x))])]

function V_estimate(x)
    V(x) + max(LV(x,maxŒ¥·µÉ(x),maxŒ¥·µá(x)),MV(x,maxŒæ(x)))
end

function randx(n)
    [[s‚ÇÄ * (2*rand()-1) * 20000,
      s‚ÇÄ * rand(LogNormal(0,3*œÇ)),
      (2*rand()-1) * 0.0050,
      (2*rand()-1) * 2000,
      (2*rand()-1) * 2000]
    for i in 1:n]
end

function randx_support(n)
    [[s‚ÇÄ * (2*rand()-1) * 20000,
      s‚ÇÄ * rand(LogNormal(0,3*œÇ)),
      (2*rand()-1) * 0.0050,
      0,
      0]
    for i in 1:n]
end


function simulate(x‚ÇÄ;N=1000,T=1)
    Œît = 1/N
    dN_a = rand(Binomial(1,Œª·µÉ*Œît),N*T)
    dN_b = rand(Binomial(1,Œª·µá*Œît),N*T)
    r_a = rand(Exponential(1/Œõ),N*T) .* dN_a
    r_b = rand(Exponential(1/Œõ),N*T) .* dN_b
    dN_ap = rand(Binomial(1,Œª·µñ*Œît),N*T)
    dN_bp = rand(Binomial(1,Œª·µñ*Œît),N*T)
    r_ap = rand(Exponential(1/Œõ·µñ),N*T) .* dN_ap
    r_bp = rand(Exponential(1/Œõ·µñ),N*T) .* dN_bp
    dW_s = rand(Normal(0,sqrt(Œît)),N*T)
    dW_p = œ± * dW_s + sqrt(1-œ±^2) * rand(Normal(0,sqrt(Œît)),N*T)

    S = zeros(N*T)
    P = zeros(N*T)
    S[1] = s(x‚ÇÄ)
    P[1] = p(x‚ÇÄ)
    for i = 2:N*T
        is_cheap = cheap(P[i-1],S[i-1])
        is_rich = rich(P[i-1],S[i-1])
        r_a[i] *= (is_rich ? Œõ/Œõ·µñ : 1)
        r_b[i] *= (is_cheap ? Œõ/Œõ·µñ : 1)
        S[i] = S[i-1] + S[i-1] * (œÇ * dW_s[i] + r_a[i] - r_b[i])
        r_ap[i] *= is_cheap ? 1 : 0
        r_bp[i] *= is_rich ? 1 : 0
        P[i] = P[i-1] + S[i-1] * (Œ∫ * dW_p[i] + r_a[i] - r_b[i] + r_ap[i] - r_bp[i])
    end
    [[S[i],P[i],r_a[i],r_b[i],r_ap[i],r_bp[i]] for i in 2:length(S)]
end



function total_reward(x‚ÇÄ;N=1000,T=1,Simulations=500,Safe=true)
    Œît = 1/N
    reward = 0
    reward = @parallel (+) for i = 1:Simulations
        reward_i = 0
        sim = simulate(x‚ÇÄ;N=N,T=T)
        t=1
        x = x‚ÇÄ
        for j in sim
            bid = Safe ? min(0.01,max(0.0001,Œ¥·µá(x))) : Œ¥·µá(x)
            offer = Safe ? min(0.01,max(0.0001,Œ¥·µÉ(x))) : Œ¥·µÉ(x)
            hedge = Œæ(x)
            if isnan(hedge)
                hedge=0
            end
            if isinf(hedge)
                hedge=0
            end
            new_x = [y(x), j[1], j[2], q(x), h(x)]
            new_r·µÉ = j[3]
            new_r·µá = j[4]
            if new_r·µÉ >= offer
                new_x = new_x + [s(new_x),0,0,-1,0]
            end
            if new_r·µá >= bid
                new_x = new_x + [-s(new_x),0,0,1,0]
            end
            if offer < 0 || bid < 0
                new_x = new_x + [- s(new_x)*œá,0,0,0,0]
            end
            posicao = q(x)+h(x)
            if posicao > hedge_limit
                hedge = max(-posicao,min(0,hedge))
            elseif posicao < -hedge_limit
                hedge = min(-posicao,max(0,hedge))
            end

            if abs(hedge) >= 1
                new_x = Œì(new_x,hedge)
            end
            reward_i += exp(-œÅ*t*Œît)*R(new_x) - exp(-œÅ*(t-1)*Œît)*R(x)
            if isnan(reward_i)
                println("NAN at ",x," -> ",new_x," hedge: ",hedge,", t: ",t)
                break
            end
            x = new_x
            t+=1
        end
        #reward += reward_i
        reward_i
    end
    reward/N
end


X_support = [randx_support(19);[x‚ÇÄ]]
œï_X_support = œï.(X_support)
œï_X_data_support = permutedims(batch(œï_X_support))
V_support = R.(X_support)

X_sample = randx(100)
œï_X = œï.(X_sample)
œï_X_data = permutedims(batch(œï_X))

learning_rate = 0.25
learning_best = 0.50

if !@isdefined best_reward
    best_Œ∏·µÉ = Œ∏·µÉ
    best_Œ∏·µá = Œ∏·µá
    best_Œ∏ ∑ = Œ∏ ∑
    best_Œ∏·µõ = Œ∏·µõ
    best_reward = -Inf
end

for iter = 1:15
    Œ¥·µÉ_data = maxŒ¥·µÉ.(X_sample)
    Œ¥·µá_data = maxŒ¥·µá.(X_sample)
    Œæ_data = maxŒæ.(X_sample)

    #new_Œ∏·µÉlasso = glmnetcv(œï_X_data,Œ¥·µÉ_data)
    #new_Œ∏·µÉlasso_i = argmin(new_Œ∏·µÉlasso.meanloss)
    #new_Œ∏·µÉ = new_Œ∏·µÉlasso.path.betas[:,new_Œ∏·µÉlasso_i]
    new_Œ∏·µÉ = ridge(œï_X_data,Œ¥·µÉ_data,0.15;bias=false)
    new_Œ¥·µÉ_data = [Œ¥·µÉ(x,new_Œ∏·µÉ) for x in X_sample]

    #new_Œ∏·µálasso = glmnetcv(œï_X_data,Œ¥·µá_data)
    #new_Œ∏·µálasso_i = argmin(new_Œ∏·µálasso.meanloss)
    #new_Œ∏·µá = new_Œ∏·µálasso.path.betas[:,new_Œ∏·µálasso_i]
    new_Œ∏·µá = ridge(œï_X_data,Œ¥·µá_data,0.15;bias=false)
    new_Œ¥·µá_data = [Œ¥·µá(x,new_Œ∏·µá) for x in X_sample]

    #new_Œ∏ ∑lasso = glmnetcv(œï_X_data,Œæ_data)
    #new_Œ∏ ∑lasso_i = argmin(new_Œ∏ ∑lasso.meanloss)
    #new_Œ∏ ∑ = new_Œ∏ ∑lasso.path.betas[:,new_Œ∏ ∑lasso_i]
    new_Œ∏ ∑ = ridge(œï_X_data,Œæ_data,0.15;bias=false)
    new_Œæ_data = [Œæ(x,new_Œ∏ ∑) for x in X_sample]

    policy_error = sqrt(mean((new_Œ¥·µÉ_data .- Œ¥·µÉ_data) .^2)),  sqrt(mean((new_Œ¥·µá_data .- Œ¥·µá_data) .^2)), sqrt(mean((new_Œæ_data .- Œæ_data) .^2))
    #Update policy functions
    Œ∏·µÉ = learning_best*best_Œ∏·µÉ + (1-learning_rate-learning_best)*Œ∏·µÉ + learning_rate * new_Œ∏·µÉ
    Œ∏·µá = learning_best*best_Œ∏·µá + (1-learning_rate-learning_best)*Œ∏·µá + learning_rate * new_Œ∏·µá
    Œ∏ ∑ = learning_best*best_Œ∏ ∑ + (1-learning_rate-learning_best)*Œ∏ ∑ + learning_rate * new_Œ∏ ∑

    function V_estimate_MC(x)
        total_reward(x)
    end

    V_data = V_estimate.(X_sample)
    #new_Œ∏·µõlasso = glmnetcv(œï_X_data,V_support)
    new_Œ∏·µõlasso = glmnetcv([œï_X_data;œï_X_data_support],[V_data;V_support])
    new_Œ∏·µõlasso_i = argmin(new_Œ∏·µõlasso.meanloss)
    new_Œ∏·µõ = new_Œ∏·µõlasso.path.betas[:,new_Œ∏·µõlasso_i]
    #new_Œ∏·µõ = ridge(œï_X_data,V_data,0.5;bias=false)
    new_V_data =  [V(x,new_Œ∏·µõ) for x in X_sample]

    V_error = sqrt(mean((new_V_data .- V_data) .^2))
    #Update value function
    Œ∏·µõ= (1-learning_rate-learning_best)*Œ∏·µõ + learning_best*best_Œ∏·µõ + learning_rate * new_Œ∏·µõ

    println("Iteration $(iter): policy_error is ",mean(policy_error)," while value_error is $(V_error)")

    current_reward = total_reward(x‚ÇÄ)
    println("Total reward: ",current_reward)

    if current_reward > best_reward
        best_Œ∏·µÉ = Œ∏·µÉ
        best_Œ∏·µá = Œ∏·µá
        best_Œ∏ ∑ = Œ∏ ∑
        best_Œ∏·µõ = Œ∏·µõ
        best_reward = current_reward
        println("Found a candidate for best value, updating support.")
        #Update V_support
        V_support = total_reward.(X_support)
    end

    #New samples
    new_X_sample = randx(10)
    X_sample = [X_sample; new_X_sample]
    œï_X = [œï_X; œï.(new_X_sample)]
    œï_X_data = permutedims(batch(œï_X))
end

Rvalues  = [R(x‚ÇÄ+[-100i,0,0,i,0]) for i in -100000:10:100000]
#Rvalues  = [R(x‚ÇÄ+[-100*1000,i,0,1000,0]) for i in -10:0.01:10]
plot(Rvalues, label="utility")

Vvalues  = [V(x‚ÇÄ+[0,0,0,i,0]) for i in -100000:10:100000]
plot(Vvalues, label="value")

Œ¥·µÉvalues = [Œ¥·µÉ(x‚ÇÄ+[0,0,0,i,0]) for i in -2000:1:2000]
Œ¥·µávalues = [Œ¥·µá(x‚ÇÄ+[0,0,0,i,0]) for i in -2000:1:2000]
plot([-2000:1:2000],[Œ¥·µÉvalues,Œ¥·µávalues],label=["offer pfa","bid pfa"])

maxŒ¥·µÉvalues = [maxŒ¥·µÉ(x‚ÇÄ+[0,0,0,i,0]) for i in -2000:1:2000]
maxŒ¥·µávalues = [maxŒ¥·µá(x‚ÇÄ+[0,0,0,i,0]) for i in -2000:1:2000]
plot([-2000:1:2000],[maxŒ¥·µÉvalues,maxŒ¥·µávalues],label=["offer vfa","bid vfa"])

#Plot comparisons between PFA and VFA policies
plot([-2000:1:2000],[Œ¥·µÉvalues,maxŒ¥·µÉvalues],label=["offer pfa","offer vfa"])
plot([-2000:1:2000],[Œ¥·µávalues,maxŒ¥·µávalues],label=["bid pfa","bid vfa"])


Œævalues = [Œæ(x‚ÇÄ+[0,0,0,i,0]) for i in -1000:1:1000]
plot(Œævalues, label="hedge pfa")

maxŒævalues = [maxŒæ(x‚ÇÄ+[0,0,0,i,0]) for i in -2000:1:2000]
plot([-2000:1:2000],maxŒævalues, label="hedge vfa")

# simulation1 = simulate(x‚ÇÄ)
# df = DataFrame()
# df[:s] = [x[1] for x in simulation1]
# df[:p] = [x[2] for x in simulation1]
# df[:r_a] = [x[3] for x in simulation1]
# df[:r_b] = [x[4] for x in simulation1]
# df[:r_ap] = [x[5] for x in simulation1]
# df[:r_bp] = [x[6] for x in simulation1]
# plot(df[:s],label="Price")


Vvalues1 = vcat([x for x in -2000:100:2000, y in -2000:100:2000]...)
Vvalues2 = vcat([y for x in -2000:100:2000, y in -2000:100:2000]...)
Vvalues3 = vcat([V(x‚ÇÄ+[0,0,0,x,y]) for x in -2000:100:2000, y in -2000:100:2000]...)
surface(Vvalues1,Vvalues2,Vvalues3)

# oldŒ∏·µÉ=Œ∏·µÉ
# oldŒ∏·µá=Œ∏·µá
# oldŒ∏ ∑=Œ∏ ∑
# oldŒ∏·µõ=Œ∏·µõ
#
# Œ∏·µÉ=best_Œ∏·µÉ
# Œ∏·µá=best_Œ∏·µá
# Œ∏ ∑=best_Œ∏ ∑
# Œ∏·µõ=best_Œ∏·µõ
